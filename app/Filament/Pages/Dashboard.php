<?php

namespace App\Filament\Pages;

use App\Filament\Widgets\CountChartWidget;
use App\Filament\Widgets\CountWidget;
use App\Filament\Widgets\PerCardChartWidget;
use App\Filament\Widgets\PerCategoryChartWidget;
use App\Filament\Widgets\UpcomingTransactionsWidget;
use App\Models\TransactionItem;
use App\Notifications\UpcomingTransactionItemNotification;
use Carbon\Carbon;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Section;
use Filament\Forms\Form;
use Filament\Pages\Dashboard as BaseDashboard;
use Filament\Pages\Dashboard\Concerns\HasFiltersForm;
use Illuminate\Support\Facades\Auth;
use Malzariey\FilamentDaterangepickerFilter\Fields\DateRangePicker;

class Dashboard extends BaseDashboard
{
    use HasFiltersForm;

    public function mount(): void
    {
        /** @var \App\Models\User $user */
        $user = Auth::user();

        if (!$user) {
            return;
        }

        // Itens com pagamento nos próximos 3 dias
        $items = TransactionItem::query()
            ->whereDate('payment_date', '<=', now()->addDays(3))
            ->whereDate('payment_date', '>=', now())
            ->where('status', '!=', 'PAID')
            ->get();

        if ($items->isNotEmpty() && !$user->unreadNotifications()
                ->where('type', UpcomingTransactionItemNotification::class)
                ->exists()
        ) {
            $user->notify(new UpcomingTransactionItemNotification($items->count()));
        }
    }

    public function getColumns(): int|string|array
    {
        return [
            'sm' => 12,
            'md' => 12,
            'xl' => 12,
        ]; // TODO: Change the autogenerated stub
    }

    public function filtersForm(Form $form): Form
    {
        return $form
            ->schema([
                Section::make()
                    ->schema([
                        DateRangePicker::make('periodFilter')
                        ->label('Período')
                            ->startDate(Carbon::now()->startOfMonth())
                            ->endDate(Carbon::now()->endOfMonth())
                            ->icon('heroicons-backspace'),
//                        DatePicker::make('startDate')
//                            ->label(__('forms.forms.start_date'))
//                            ->default(Carbon::now()->startOfMonth()),
//                        DatePicker::make('endDate')
//                            ->label(__('forms.forms.end_date'))
//                            ->default(Carbon::now()->endOfMonth())
                    ])
                    ->columns(4),
            ]);
    }

    protected function getFilterFormDefaults(): array
    {
        return [
            'startDate' => Carbon::now()->startOfMonth()->toDateString(),
            'endDate' => Carbon::now()->endOfMonth()->toDateString(),
            'status' => '',
            'category' => null, // ou um ID padrão, se quiser
        ];
    }

    public function getFilters(): array
    {
        return [
            'startDate' => Carbon::now()->startOfMonth()->toDateString(),
            'endDate' => Carbon::now()->endOfMonth()->toDateString(),
            'status' => '',
            'category' => null,
        ];
    }

    public function persistsFiltersInSession(): bool
    {
        return false;
    }

    public function getWidgets(): array
    {
        return [
            CountWidget::class,
            UpcomingTransactionsWidget::class,
            PerCardChartWidget::class,
            CountChartWidget::class,
            PerCategoryChartWidget::class,
        ];
    }
}
